function T(e){if(!e||e.trim()==="")return{data:null,error:new Error("Empty response received from server")};if(e.trim().startsWith("<!DOCTYPE html>")||e.trim().startsWith("<html")||e.includes("<body")||e.includes("<head")){console.warn("HTML response received when expecting JSON");let r="Server returned HTML instead of JSON";try{const t=e.match(/<title[^>]*>([^<]+)<\/title>/i);t&&t[1]&&(r+=`: ${t[1]}`)}catch{}return{data:null,error:new Error(r)}}try{return{data:JSON.parse(e),error:null}}catch(r){console.error("Error parsing JSON:",r),console.debug("Raw response text (first 500 chars):",e.substring(0,500));const t=e.length>50?e.substring(0,50)+"...":e;return{data:null,error:new Error(`Invalid JSON response from server: ${t}`)}}}async function c(e,r={}){const{timeout:t=3e4,retries:l=2,retryDelay:E=1e3,...p}=r,g={Accept:"application/json",...p.headers||{}},w=new AbortController,h=setTimeout(()=>w.abort(),t);let n=0,u=null;for(;n<=l;)try{n>0&&(await new Promise(d=>setTimeout(d,E)),console.log(`Retrying request to ${e} (attempt ${n} of ${l})`));const o=await fetch(e,{...p,headers:g,signal:w.signal});if(clearTimeout(h),o.status===204)return{};const s=o.headers.get("content-type"),a=await o.text();if(!a||a.trim()==="")throw new Error("Empty response received from server");if(s!=null&&s.includes("text/html")||a.trim().startsWith("<!DOCTYPE html>")){if(console.error("HTML response received when expecting JSON"),o.ok)return{};throw new Error("Server returned HTML instead of JSON. Please try again later.")}const{data:i,error:f}=T(a);if(f)throw s&&s.includes("text/html")?new Error("Server returned an HTML page instead of JSON. The server might be experiencing issues."):f;if(!o.ok){const d=(i==null?void 0:i.message)||o.statusText||"Unknown error",m=new Error(`API Error (${o.status}): ${d}`);throw m.status=o.status,m.data=i,m}return i}catch(o){if(u=o,o instanceof TypeError&&o.message.includes("NetworkError")||o.name==="AbortError")throw clearTimeout(h),new Error("Network error: Please check your connection");if(n===l)throw clearTimeout(h),u;n++}throw u||new Error("Unknown error occurred")}const y={get:(e,r={})=>c(e,{...r,method:"GET"}),post:(e,r,t={})=>c(e,{...t,method:"POST",headers:{"Content-Type":"application/json",...t.headers||{}},body:JSON.stringify(r)}),put:(e,r,t={})=>c(e,{...t,method:"PUT",headers:{"Content-Type":"application/json",...t.headers||{}},body:JSON.stringify(r)}),delete:(e,r={})=>c(e,{...r,method:"DELETE"})};export{y as api,c as apiFetch};
