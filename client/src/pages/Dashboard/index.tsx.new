import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/context/AuthContext';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';

// Import dashboard components
import PortfolioOverview from '@/components/dashboard/PortfolioOverview';
import RecentTransactions from '@/components/dashboard/RecentTransactions';
import MarketWatch from '@/components/dashboard/MarketWatch';
import GoalsPlanning from '@/components/dashboard/GoalsPlanning';
import ReportsStatements from '@/components/dashboard/ReportsStatements';
import NotificationsAlerts from '@/components/dashboard/NotificationsAlerts';

const Dashboard: React.FC = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // State for dialogs
  const [showDepositDialog, setShowDepositDialog] = useState(false);
  const [showWithdrawDialog, setShowWithdrawDialog] = useState(false);
  const [showInvestDialog, setShowInvestDialog] = useState(false);
  const [showGoalDialog, setShowGoalDialog] = useState(false);
  const [showSupportDialog, setShowSupportDialog] = useState(false);
  
  // State for dialog inputs
  const [depositAmount, setDepositAmount] = useState('');
  const [withdrawAmount, setWithdrawAmount] = useState('');
  const [investSymbol, setInvestSymbol] = useState('');
  const [investAmount, setInvestAmount] = useState('');
  
  // Deposit mutation
  const depositMutation = useMutation({
    mutationFn: async (amount: string) => {
      // In a real app, this would be an API call
      // For now, we'll simulate a successful response
      return { success: true, amount };
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['portfolio', user?.id] });
      toast({
        title: 'Deposit Successful',
        description: `$${data.amount} has been added to your account.`,
      });
      setShowDepositDialog(false);
      setDepositAmount('');
    },
    onError: (error) => {
      toast({
        title: 'Deposit Failed',
        description: 'There was an error processing your deposit. Please try again.',
        variant: 'destructive'
      });
    }
  });
  
  // Withdraw mutation
  const withdrawMutation = useMutation({
    mutationFn: async (amount: string) => {
      // In a real app, this would be an API call
      // For now, we'll simulate a successful response
      return { success: true, amount };
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['portfolio', user?.id] });
      toast({
        title: 'Withdrawal Successful',
        description: `$${data.amount} has been withdrawn from your account.`,
      });
      setShowWithdrawDialog(false);
      setWithdrawAmount('');
    },
    onError: (error) => {
      toast({
        title: 'Withdrawal Failed',
        description: 'There was an error processing your withdrawal. Please try again.',
        variant: 'destructive'
      });
    }
  });
  
  // Invest mutation
  const investMutation = useMutation({
    mutationFn: async ({ symbol, amount }: { symbol: string, amount: string }) => {
      // In a real app, this would be an API call
      // For now, we'll simulate a successful response
      return { success: true, symbol, amount };
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['portfolio', user?.id] });
      toast({
        title: 'Investment Successful',
        description: `$${data.amount} has been invested in ${data.symbol}.`,
      });
      setShowInvestDialog(false);
      setInvestSymbol('');
      setInvestAmount('');
    },
    onError: (error) => {
      toast({
        title: 'Investment Failed',
        description: 'There was an error processing your investment. Please try again.',
        variant: 'destructive'
      });
    }
  });
  
  // Format currency
  const formatCurrency = (value: string | number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(typeof value === 'string' ? parseFloat(value) : value);
  };
  
  // Handle deposit form submission
  const handleDeposit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!depositAmount || isNaN(parseFloat(depositAmount)) || parseFloat(depositAmount) <= 0) {
      toast({
        title: 'Invalid Amount',
        description: 'Please enter a valid deposit amount.',
        variant: 'destructive'
      });
      return;
    }
    depositMutation.mutate(depositAmount);
  };
  
  // Handle withdraw form submission
  const handleWithdraw = (e: React.FormEvent) => {
    e.preventDefault();
    if (!withdrawAmount || isNaN(parseFloat(withdrawAmount)) || parseFloat(withdrawAmount) <= 0) {
      toast({
        title: 'Invalid Amount',
        description: 'Please enter a valid withdrawal amount.',
        variant: 'destructive'
      });
      return;
    }
    
    // In a real app, you would check if the user has enough balance
    withdrawMutation.mutate(withdrawAmount);
  };
  
  // Handle invest form submission
  const handleInvest = (e: React.FormEvent) => {
    e.preventDefault();
    if (!investSymbol) {
      toast({
        title: 'Missing Symbol',
        description: 'Please select a security to invest in.',
        variant: 'destructive'
      });
      return;
    }
    
    if (!investAmount || isNaN(parseFloat(investAmount)) || parseFloat(investAmount) <= 0) {
      toast({
        title: 'Invalid Amount',
        description: 'Please enter a valid investment amount.',
        variant: 'destructive'
      });
      return;
    }
    
    investMutation.mutate({ symbol: investSymbol, amount: investAmount });
  };
  
  // Handle portfolio actions
  const handlePortfolioAction = {
    deposit: () => setShowDepositDialog(true),
    withdraw: () => setShowWithdrawDialog(true),
    invest: () => setShowInvestDialog(true),
    rebalance: () => {
      toast({
        title: 'Portfolio Rebalancing',
        description: 'Your portfolio rebalancing request has been submitted.',
      });
    }
  };
  
  // Handle market actions
  const handleMarketAction = {
    addToWatchlist: (symbol: string) => {
      toast({
        title: 'Added to Watchlist',
        description: `${symbol} has been added to your watchlist.`,
      });
    },
    removeFromWatchlist: (symbol: string) => {
      toast({
        title: 'Removed from Watchlist',
        description: `${symbol} has been removed from your watchlist.`,
      });
    },
    buy: (symbol: string) => {
      setInvestSymbol(symbol);
      setShowInvestDialog(true);
    }
  };
  
  // Handle goal actions
  const handleGoalAction = {
    createGoal: () => setShowGoalDialog(true),
    editGoal: (goalId: string) => {
      toast({
        title: 'Edit Goal',
        description: `Editing goal ${goalId}`,
      });
    },
    deleteGoal: (goalId: string) => {
      toast({
        title: 'Delete Goal',
        description: `Goal ${goalId} has been deleted.`,
      });
    }
  };
  
  // Handle notification actions
  const handleNotificationAction = {
    viewAll: () => {
      toast({
        title: 'View All Notifications',
        description: 'Navigating to all notifications.',
      });
    },
    createAlert: () => {
      toast({
        title: 'Create Alert',
        description: 'Creating a new alert.',
      });
    }
  };
  
  return (
    <div className="container mx-auto py-6 space-y-8">
      <div className="flex flex-col md:flex-row justify-between items-start gap-6">
        <div className="w-full md:w-2/3 space-y-6">
          {/* Portfolio Overview */}
          <PortfolioOverview 
            onDeposit={handlePortfolioAction.deposit}
            onWithdraw={handlePortfolioAction.withdraw}
            onInvest={handlePortfolioAction.invest}
            onRebalance={handlePortfolioAction.rebalance}
          />
          
          {/* Recent Transactions */}
          <RecentTransactions 
            limit={5}
            showViewAll={true}
            onViewAll={() => {
              toast({
                title: 'View All Transactions',
                description: 'Navigating to all transactions.',
              });
            }}
          />
        </div>
        
        <div className="w-full md:w-1/3 space-y-6">
          {/* Notifications & Alerts */}
          <NotificationsAlerts 
            onViewAll={handleNotificationAction.viewAll}
            onCreateAlert={handleNotificationAction.createAlert}
          />
          
          {/* Market Watch */}
          <MarketWatch 
            onAddToWatchlist={handleMarketAction.addToWatchlist}
            onRemoveFromWatchlist={handleMarketAction.removeFromWatchlist}
            onBuy={handleMarketAction.buy}
          />
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Goals & Planning */}
        <GoalsPlanning 
          onCreateGoal={handleGoalAction.createGoal}
          onEditGoal={handleGoalAction.editGoal}
          onDeleteGoal={handleGoalAction.deleteGoal}
        />
        
        {/* Reports & Statements */}
        <ReportsStatements />
      </div>
      
      {/* Deposit Dialog */}
      <Dialog open={showDepositDialog} onOpenChange={setShowDepositDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Deposit Funds</DialogTitle>
            <DialogDescription>
              Enter the amount you want to deposit into your account.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleDeposit}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="deposit-amount" className="text-right">Amount</label>
                <div className="col-span-3">
                  <div className="flex items-center">
                    <span className="mr-2">$</span>
                    <Input
                      id="deposit-amount"
                      placeholder="0.00"
                      value={depositAmount}
                      onChange={(e) => setDepositAmount(e.target.value)}
                      className="col-span-3"
                    />
                  </div>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setShowDepositDialog(false)}>Cancel</Button>
              <Button type="submit" disabled={depositMutation.isPending}>Deposit</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Withdraw Dialog */}
      <Dialog open={showWithdrawDialog} onOpenChange={setShowWithdrawDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Withdraw Funds</DialogTitle>
            <DialogDescription>
              Enter the amount you want to withdraw from your account.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleWithdraw}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="withdraw-amount" className="text-right">Amount</label>
                <div className="col-span-3">
                  <div className="flex items-center">
                    <span className="mr-2">$</span>
                    <Input
                      id="withdraw-amount"
                      placeholder="0.00"
                      value={withdrawAmount}
                      onChange={(e) => setWithdrawAmount(e.target.value)}
                      className="col-span-3"
                    />
                  </div>
                </div>
              </div>
              <div className="col-span-4">
                <p className="text-sm text-muted-foreground">Available balance: {formatCurrency(user?.balance || '0')}</p>
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setShowWithdrawDialog(false)}>Cancel</Button>
              <Button type="submit" disabled={withdrawMutation.isPending}>Withdraw</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Invest Dialog */}
      <Dialog open={showInvestDialog} onOpenChange={setShowInvestDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Invest in Securities</DialogTitle>
            <DialogDescription>
              Enter the details of your investment.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleInvest}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="invest-symbol" className="text-right">Symbol</label>
                <div className="col-span-3">
                  <Input
                    id="invest-symbol"
                    placeholder="e.g., AAPL"
                    value={investSymbol}
                    onChange={(e) => setInvestSymbol(e.target.value.toUpperCase())}
                    className="col-span-3"
                  />
                </div>
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="invest-amount" className="text-right">Amount</label>
                <div className="col-span-3">
                  <div className="flex items-center">
                    <span className="mr-2">$</span>
                    <Input
                      id="invest-amount"
                      placeholder="0.00"
                      value={investAmount}
                      onChange={(e) => setInvestAmount(e.target.value)}
                      className="col-span-3"
                    />
                  </div>
                </div>
              </div>
              <div className="col-span-4">
                <p className="text-sm text-muted-foreground">Available balance: {formatCurrency(user?.balance || '0')}</p>
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setShowInvestDialog(false)}>Cancel</Button>
              <Button type="submit" disabled={investMutation.isPending}>Invest</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Dashboard;
