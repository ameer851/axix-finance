import fs from "fs";
import path, { dirname } from "path";
import { fileURLToPath } from "url";
import { supabase } from "../server/supabase";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function applyMigration() {
  try {
    console.log("Starting database migration...");

    // Read the migration file
    const migrationPath = path.join(
      __dirname,
      "../supabase/migrations/20250806_fix_user_schema.sql"
    );
    const migrationSQL = fs.readFileSync(migrationPath, "utf8");
    
    console.log("Migration file read successfully.");
    console.log("⚠️ IMPORTANT: This script cannot apply migrations directly through the Supabase REST API.");
    console.log("To properly apply migrations, please use one of the following methods:");
    console.log("");
    console.log("1. Supabase Dashboard:");
    console.log("   - Log in to the Supabase dashboard (https://app.supabase.io)");
    console.log("   - Navigate to your project");
    console.log("   - Go to the SQL Editor section");
    console.log("   - Copy and paste the SQL from the migration file");
    console.log("   - Execute the SQL");
    console.log("");
    console.log("2. Supabase CLI (if installed):");
    console.log("   - Run: supabase db push");
    console.log("");
    console.log("3. Direct Database Connection:");
    console.log("   - If you have direct PostgreSQL access, connect using psql or another PostgreSQL client");
    console.log("   - Execute the SQL statements in the migration file");
    console.log("");
    console.log("Here is the SQL that needs to be executed:");
    console.log("-------------------------------------------");
    console.log(migrationSQL);
    console.log("-------------------------------------------");
    
    // For demo purposes, let's verify we can at least connect to the database
    const { data, error } = await supabase
      .from("users")
      .select("count(*)")
      .limit(1);
      
    if (error) {
      console.error("Error connecting to database:", error);
    } else {
      console.log("Successfully connected to database. User count:", data);
    }

    console.log("Migration script completed. Please apply the SQL manually as described above.");
    process.exit(0);
  } catch (err) {
    console.error("Error running migration script:", err);
    process.exit(1);
  }
}

applyMigration();

async function applyMigration() {
  try {
    console.log("Starting database migration...");
    console.log(`Using Supabase URL: ${supabaseUrl}`);

    // Check if the migration file exists
    const migrationPath = path.join(
      __dirname,
      "../supabase/migrations/20250806_fix_user_schema.sql"
    );
    
    if (!fs.existsSync(migrationPath)) {
      console.error(`Migration file not found: ${migrationPath}`);
      process.exit(1);
    }
    
    console.log(`Found migration file: ${migrationPath}`);
    const migrationSQL = fs.readFileSync(migrationPath, "utf8");

    // Execute the migration statements one by one
    const statements = migrationSQL
      .split(";")
      .map((s) => s.trim())
      .filter((s) => s.length > 0);

    console.log(`Found ${statements.length} SQL statements to execute.`);

    // Try using the REST API directly for each statement
    for (const sql of statements) {
      if (!sql) continue;
      
      console.log(`Executing SQL: ${sql.substring(0, 50)}${sql.length > 50 ? '...' : ''}`);
      
      try {
        // Execute SQL via Supabase REST API
        const response = await fetch(`${supabaseUrl}/rest/v1/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'apikey': supabaseServiceKey,
            'Authorization': `Bearer ${supabaseServiceKey}`,
            'Prefer': 'return=minimal'
          },
          body: JSON.stringify({ query: sql })
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error(`Failed to execute SQL: ${response.status} - ${errorText}`);
          
          console.log("Trying PostgreSQL function approach...");
          // Try creating and using a PostgreSQL function
          await createAndUsePgFunction(sql);
        } else {
          console.log("SQL executed successfully.");
        }
      } catch (error) {
        console.error("Error executing SQL:", error);
        process.exit(1);
      }
    }

    console.log("Migration completed successfully!");
    process.exit(0);
  } catch (err) {
    console.error("Error running migration:", err);
    process.exit(1);
  }
}

// Function to create and use a PostgreSQL function for executing SQL
async function createAndUsePgFunction(sqlStatement: string) {
  try {
    // Create a function that can execute arbitrary SQL
    const functionName = `exec_sql_${Date.now()}`;
    const createFunctionSQL = `
      CREATE OR REPLACE FUNCTION ${functionName}()
      RETURNS void AS $$
      BEGIN
        ${sqlStatement.replace(/'/g, "''")}
      END;
      $$ LANGUAGE plpgsql;
    `;
    
    // Create the function
    const functionResponse = await fetch(`${supabaseUrl}/rest/v1/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': supabaseServiceKey,
        'Authorization': `Bearer ${supabaseServiceKey}`,
        'Prefer': 'return=minimal'
      },
      body: JSON.stringify({ query: createFunctionSQL })
    });
    
    if (!functionResponse.ok) {
      console.error(`Failed to create function: ${await functionResponse.text()}`);
      throw new Error("Failed to create SQL execution function");
    }
    
    // Execute the function
    const execResponse = await fetch(`${supabaseUrl}/rest/v1/rpc/${functionName}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': supabaseServiceKey,
        'Authorization': `Bearer ${supabaseServiceKey}`
      },
      body: JSON.stringify({})
    });
    
    if (!execResponse.ok) {
      console.error(`Failed to execute function: ${await execResponse.text()}`);
      throw new Error("Failed to execute SQL through function");
    }
    
    console.log(`SQL executed successfully through function ${functionName}.`);
    
    // Drop the function when done
    const dropFunctionSQL = `DROP FUNCTION ${functionName}();`;
    await fetch(`${supabaseUrl}/rest/v1/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': supabaseServiceKey,
        'Authorization': `Bearer ${supabaseServiceKey}`,
        'Prefer': 'return=minimal'
      },
      body: JSON.stringify({ query: dropFunctionSQL })
    });
    
    return true;
  } catch (error) {
    console.error("Error in createAndUsePgFunction:", error);
    return false;
  }
}

// Run the migration
applyMigration();
