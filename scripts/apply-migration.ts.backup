import fs from "fs";
import path, { dirname } from "path";
import { fileURLToPath } from "url";
import { supabase } from "../server/supabase";
import { createClient } from "@supabase/supabase-js";
import fetch from "node-fetch";

// Get server/supabase.ts to extract URL and key values
const serverSupabasePath = path.join(
  dirname(fileURLToPath(import.meta.url)),
  "../server/supabase.ts"
);
const supabaseFileContent = fs.readFileSync(serverSupabasePath, "utf8");

// Extract Supabase URL and key using regex
const urlMatch = supabaseFileContent.match(/supabaseUrl\s*=\s*(process\.env\.SUPABASE_URL\s*\|\|\s*["']([^"']+)["'])/);
const keyMatch = supabaseFileContent.match(/supabaseServiceKey\s*=\s*(process\.env\.SUPABASE_SERVICE_ROLE_KEY\s*\|\|\s*process\.env\.SUPABASE_ANON_KEY\s*\|\|\s*["']([^"']+)["'])/);

const supabaseUrl = process.env.SUPABASE_URL || (urlMatch && urlMatch[2]) || "";
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || (keyMatch && keyMatch[2]) || "";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Create a special admin client for direct PostgreSQL access
const adminClient = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
});

async function applyMigration() {
  try {
    console.log("Starting database migration...");

    // Read the migration file
    const migrationPath = path.join(
      __dirname,
      "../supabase/migrations/20250806_fix_user_schema.sql"
    );
    const migrationSQL = fs.readFileSync(migrationPath, "utf8");

    // Execute the migration statements one by one
    const statements = migrationSQL
      .split(";")
      .map((s) => s.trim())
      .filter((s) => s.length > 0);

    console.log(`Found ${statements.length} SQL statements to execute.`);

    for (const sql of statements) {
      if (!sql) continue;
      
      console.log(`Executing SQL: ${sql.substring(0, 50)}${sql.length > 50 ? '...' : ''}`);
      
      try {
        // Execute raw SQL directly
        const { data, error } = await supabase.query(sql);
        
        if (error) {
          console.error(`Error executing SQL statement: ${error.message}`);
          console.error("SQL statement:", sql);
          process.exit(1);
        } else {
          console.log("SQL executed successfully.");
        }
      } catch (sqlError) {
        console.error("Error during SQL execution:", sqlError);
        console.error("SQL statement:", sql);
        
        // Try an alternative approach if the first method fails
        try {
          console.log("Trying alternative method to execute SQL...");
          const { error } = await fetch(`${supabaseUrl}/rest/v1/`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${supabaseServiceKey}`,
              'X-Client-Info': 'supabase-js/2.0.0',
              'Prefer': 'resolution=merge-duplicates'
            },
            body: JSON.stringify({
              query: sql
            })
          }).then(res => res.json());
          
          if (error) {
            console.error("Failed with alternative method too:", error);
            process.exit(1);
          } else {
            console.log("SQL executed successfully with alternative method.");
          }
        } catch (altError) {
          console.error("Alternative method also failed:", altError);
          process.exit(1);
        }
      }
    }

    console.log("Basic table structure created.");

    console.log("Migration completed successfully!");
    process.exit(0);
  } catch (err) {
    console.error("Error running migration:", err);
    process.exit(1);
  }
}

applyMigration();
