import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config({ path: path.join(__dirname, "..", ".env") });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function updateAdmin() {
  try {
    console.log("Looking for admin users...");

    const { data: authUser, error: authError } =
      await supabase.auth.admin.createUser({
        email: "admin@axixfinance.com",
        password: "Axix-Admin@123",
        email_confirm: true,
        user_metadata: { role: "admin" },
      });

    if (authError) {
      if (
        authError.message.includes("already been registered") ||
        authError.code === "email_exists"
      ) {
        console.log("Admin user exists, updating...");

        const { data: userData, error: userError } = await supabase
          .from("users")
          .select("*")
          .eq("email", "admin@axixfinance.com")
          .single();

        if (userError) {
          console.error("Error fetching user:", userError);
          return;
        }

        // Log the user data to see available columns
        console.log("Current user data:", userData);

        // Build update object based on existing columns
        const updateFields = {
          role: "admin",
        };

        // Only add fields that exist in the current user data
        if ("is_active" in userData) updateFields.is_active = true;
        if ("isActive" in userData) updateFields.isActive = true;
        if ("is_verified" in userData) updateFields.is_verified = true;
        if ("isVerified" in userData) updateFields.isVerified = true;
        if ("updated_at" in userData)
          updateFields.updated_at = new Date().toISOString();
        if ("updatedAt" in userData)
          updateFields.updatedAt = new Date().toISOString();

        console.log("Updating fields:", updateFields);

        const { error: updateError } = await supabase
          .from("users")
          .update(updateFields)
          .eq("email", "admin@axixfinance.com");

        if (updateError) {
          console.error("Error updating user:", updateError);
          return;
        }

        console.log("Admin user updated successfully!");
      } else {
        console.error("Error creating admin:", authError);
        return;
      }
    } else {
      console.log("Admin user created successfully in auth system");

      const { error: profileError } = await supabase.from("users").insert([
        {
          username: "admin",
          email: "admin@axixfinance.com",
          first_name: "Admin",
          last_name: "User",
          role: "admin",
          is_active: true,
          is_verified: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        },
      ]);

      if (profileError) {
        console.error("Error creating user profile:", profileError);
        return;
      }

      console.log("Admin user profile created successfully!");
    }

    console.log("\nAdmin credentials:");
    console.log("Email: admin@axixfinance.com");
    console.log("Password: Axix-Admin@123");
  } catch (error) {
    console.error("Unexpected error:", error);
  }
}

updateAdmin();
