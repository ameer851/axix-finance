/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/ping": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Liveness ping */
    get: operations["ping"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health check */
    get: operations["health"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/create-profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create user profile (service role) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateProfileRequest"];
        };
      };
      responses: {
        /** @description Created profile */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UserSummary"];
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/investments/active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List active investments for authenticated user */
    get: operations["listActiveInvestments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/investments/history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List completed investments for authenticated user */
    get: operations["listCompletedInvestments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/investments/returns/today": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns summary for current user (UTC day) */
    get: operations["getTodayReturns"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/returns/today": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Global returns summary (admin) */
    get: operations["getTodayReturnsAdmin"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/investments/run-daily": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Manually trigger daily returns job (admin) */
    post: operations["runDailyInvestmentsJob"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/jobs/daily-investments/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Latest and previous daily job run status */
    get: operations["getDailyJobStatus"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/jobs/daily-investments/runs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Paginated historical runs */
    get: operations["listDailyJobRuns"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/jobs/daily-investments/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Consolidated health & recent statistics for daily job */
    get: operations["getDailyJobHealth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/ledger/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Verify ledger hash chain integrity */
    get: operations["verifyLedgerIntegrity"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/ledger": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Paginated ledger entries */
    get: operations["listLedgerEntries"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/job-runs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Paginated job run history (all jobs) */
    get: operations["listJobRuns"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    HealthStatus: {
      status?: string;
      ok?: boolean;
    };
    CreateProfileRequest: {
      /** Format: email */
      email: string;
      username: string;
    };
    UserSummary: {
      id?: number;
      email?: string;
      username?: string;
    };
    InvestmentActive: {
      id?: number;
      plan_name?: string;
      /** @description Daily percent (e.g. 2 for 2%) */
      daily_profit?: number;
      /** @description Number of days */
      plan_duration?: number;
      principal_amount?: number;
      total_earned?: number;
      days_elapsed?: number;
      /** @enum {string} */
      status?: "active" | "completed";
      /** Format: date-time */
      start_date?: string;
      /** Format: date-time */
      end_date?: string | null;
      /** Format: date-time */
      last_return_applied?: string | null;
    };
    InvestmentCompleted: {
      id?: number;
      original_investment_id?: number;
      plan_name?: string;
      daily_profit?: number;
      duration?: number;
      principal_amount?: number;
      total_earned?: number;
      /** Format: date-time */
      start_date?: string;
      /** Format: date-time */
      end_date?: string;
      /** Format: date-time */
      completed_at?: string;
    };
    UserReturnSummary: {
      /** Format: date */
      todayUtc?: string;
      count?: number;
      sum?: number;
      completionsCount?: number;
      /** @description Sum of expected daily accruals not yet applied (diagnostic) */
      expectedPendingSum?: number;
      /** @description Count of investments expected to accrue today but not yet applied */
      expectedPendingCount?: number;
    };
    GlobalReturnSummary: {
      /** @description Number of distinct users with returns today */
      userCount?: number;
    } & components["schemas"]["UserReturnSummary"];
    DailyJobRunResult: {
      /** Format: date-time */
      startedAt?: string;
      /** Format: date-time */
      finishedAt?: string;
      processedCount?: number;
      completedCount?: number;
      totalApplied?: number;
      dryRun?: boolean;
      success?: boolean;
      source?: string;
    };
    JobRun: {
      id?: number;
      job_name?: string;
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      finished_at?: string | null;
      processed_count?: number;
      completed_count?: number;
      total_applied?: number;
      success?: boolean;
      error_text?: string | null;
      source?: string;
    };
    DailyJobStatus: {
      last?: components["schemas"]["JobRun"];
      previous?: components["schemas"]["JobRun"];
      stale?: boolean;
    };
    DailyJobHealth: {
      ok?: boolean;
      stale?: boolean;
      lastRun?: components["schemas"]["JobRun"];
      recentRuns?: components["schemas"]["JobRun"][];
      stats?: {
        window?: number;
        successes?: number;
        failures?: number;
        successRate?: number;
        avgProcessed?: number;
        avgCompleted?: number;
      };
    };
    LedgerEntry: {
      id?: number;
      user_id?: number;
      entry_type?: string;
      amount_delta?: number;
      active_deposits_delta?: number;
      balance_after?: number;
      active_deposits_after?: number;
      reference_table?: string | null;
      reference_id?: number | null;
      metadata?: Record<string, never>;
      previous_hash?: string | null;
      entry_hash?: string;
      /** Format: date-time */
      created_at?: string;
    };
    LedgerVerifyResult: {
      ok?: boolean;
      checked?: number;
      firstCorruptionId?: number | null;
      hashMismatches?: number;
      durationMs?: number;
    };
    PaginationMeta: {
      page?: number;
      limit?: number;
      total?: number;
    };
    ErrorResponse: {
      error?: {
        code?: string;
        message?: string;
        details?: Record<string, never> | null;
      };
    };
  };
  responses: {
    /** @description Authentication required or invalid */
    Unauthorized: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Insufficient privileges */
    Forbidden: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Invalid request payload/parameters */
    BadRequest: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Internal server error */
    ServerError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  ping: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Pong + timestamp */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            ok?: boolean;
            ts?: number;
          };
        };
      };
    };
  };
  health: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Health status */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HealthStatus"];
        };
      };
    };
  };
  listActiveInvestments: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Active investments */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            investments?: components["schemas"]["InvestmentActive"][];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["ServerError"];
    };
  };
  listCompletedInvestments: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Completed investments */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            investments?: components["schemas"]["InvestmentCompleted"][];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["ServerError"];
    };
  };
  getTodayReturns: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns summary */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserReturnSummary"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  getTodayReturnsAdmin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Global returns summary */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlobalReturnSummary"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  runDailyInvestmentsJob: {
    parameters: {
      query?: {
        dryRun?: 0 | 1;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Job execution result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DailyJobRunResult"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      500: components["responses"]["ServerError"];
    };
  };
  getDailyJobStatus: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Current status payload */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DailyJobStatus"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      500: components["responses"]["ServerError"];
    };
  };
  listDailyJobRuns: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated run list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data?: components["schemas"]["JobRun"][];
            meta?: components["schemas"]["PaginationMeta"];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      500: components["responses"]["ServerError"];
    };
  };
  getDailyJobHealth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Health summary */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DailyJobHealth"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      500: components["responses"]["ServerError"];
    };
  };
  verifyLedgerIntegrity: {
    parameters: {
      query?: {
        fromId?: number;
        toId?: number;
        sample?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ledger verification result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LedgerVerifyResult"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      500: components["responses"]["ServerError"];
    };
  };
  listLedgerEntries: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        userId?: number;
        entryType?: string;
        referenceTable?: string;
        referenceId?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ledger page */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data?: components["schemas"]["LedgerEntry"][];
            meta?: components["schemas"]["PaginationMeta"];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      500: components["responses"]["ServerError"];
    };
  };
  listJobRuns: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        jobName?: string;
        success?: 0 | 1;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Job runs page */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data?: components["schemas"]["JobRun"][];
            meta?: components["schemas"]["PaginationMeta"];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      500: components["responses"]["ServerError"];
    };
  };
}
